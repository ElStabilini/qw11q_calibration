[Qibo 0.2.12|INFO|2024-09-23 12:40:59]: Loading platform dummy
2024-09-23 12:40:59,877 - qm - INFO     - Starting session: 98bff646-b2c3-4000-8afe-69a0ed0cdfdf
/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qualang_tools/simulator_tools.py:8: FutureWarning: The 'create_simulator_controller_connections' function has been moved to 'qualang_tools.simulator'.
  warnings.warn(
[Qibo 0.2.12|INFO|2024-09-23 12:41:00]: Loading platform qw11q
[38;20m[Qibocal 0.0.11|INFO|2024-09-23 12:41:00]: Creating directory /home/users/elisa.stabilini/cal_qw11q/output_D3/resonator_punchout_test.[0m
[Qibo 0.2.12|INFO|2024-09-23 12:41:00]: Connecting to instrument QMController(name='qm', address='192.168.0.101:80', opxs={'con2': OPXplus(name='con2', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1e977f0>, {1: OPXOutput(device='con2', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con2', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con2', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con2', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con2', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con2', number=8, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf151ff40>, {1: OPXInput(device='con2', number=1, offset=0.0, gain=10), 2: OPXInput(device='con2', number=2, offset=0.0, gain=10)})), 'con3': OPXplus(name='con3', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548040>, {1: OPXOutput(device='con3', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con3', number=2, offset=0.0, filter={}), 7: OPXOutput(device='con3', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con3', number=8, offset=0.0, filter={}), 5: OPXOutput(device='con3', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con3', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf15480d0>, {})), 'con4': OPXplus(name='con4', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548160>, {1: OPXOutput(device='con4', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con4', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con4', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con4', number=4, offset=0.0, filter={}), 5: OPXOutput(device='con4', number=5, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf15481f0>, {})), 'con5': OPXplus(name='con5', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548280>, {1: OPXOutput(device='con5', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con5', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con5', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con5', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con5', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con5', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con5', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con5', number=10, offset=0.0, filter={}), 5: OPXOutput(device='con5', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con5', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548310>, {1: OPXInput(device='con5', number=1, offset=0.0, gain=0), 2: OPXInput(device='con5', number=2, offset=0.0, gain=0)})), 'con6': OPXplus(name='con6', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf15483a0>, {1: OPXOutput(device='con6', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con6', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con6', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con6', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con6', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con6', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con6', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con6', number=10, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548430>, {1: OPXInput(device='con6', number=1, offset=0.0, gain=10), 2: OPXInput(device='con6', number=2, offset=0.0, gain=10)})), 'con7': OPXplus(name='con7', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf15484c0>, {3: OPXOutput(device='con7', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con7', number=4, offset=0.0, filter={}), 5: OPXOutput(device='con7', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con7', number=6, offset=0.0, filter={}), 7: OPXOutput(device='con7', number=7, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548550>, {})), 'con8': OPXplus(name='con8', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf15485e0>, {3: OPXOutput(device='con8', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con8', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con8', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con8', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con8', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con8', number=10, offset=0.0, filter={}), 5: OPXOutput(device='con8', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con8', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548670>, {})), 'con9': OPXplus(name='con9', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548700>, {3: OPXOutput(device='con9', number=3, offset=0.22322496600648412, filter={'feedforward': [1.1298143371682787, -0.9007185757251136], 'feedback': [0.7709042385568349]}), 4: OPXOutput(device='con9', number=4, offset=-0.4192448541412081, filter={'feedforward': [1.0891790415038731, -1.024484298837039], 'feedback': [0.935305257333166]}), 5: OPXOutput(device='con9', number=5, offset=-0.2074, filter={'feedforward': [1.0725851073784813, -0.9529722265285006], 'feedback': [0.880387119150019]}), 6: OPXOutput(device='con9', number=6, offset=0.0, filter={}), 7: OPXOutput(device='con9', number=7, offset=-0.04, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548790>, {}))}, octaves={'octave2': Octave(name='octave2', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7ffaf1548820>, {1: OctaveOutput(device='octave2', number=1, lo_frequency=7430000000, gain=-10, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con2', number=1, offset=0.0, filter={}), q=OPXOutput(device='con2', number=2, offset=0.0, filter={}))), 2: OctaveOutput(device='octave2', number=2, lo_frequency=4800000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con2', number=3, offset=0.0, filter={}), q=OPXOutput(device='con2', number=4, offset=0.0, filter={}))), 4: OctaveOutput(device='octave2', number=4, lo_frequency=6100000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con2', number=7, offset=0.0, filter={}), q=OPXOutput(device='con2', number=8, offset=0.0, filter={}))), 3: OctaveOutput(device='octave2', number=3, lo_frequency=4800000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None), 5: OctaveOutput(device='octave2', number=5, lo_frequency=6100000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None)}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7ffaf15488b0>, {1: OctaveInput(device='octave2', number=1, lo_frequency=7430000000, lo_source='internal', IF_mode_I='direct', IF_mode_Q='direct', opx_port=OPXIQ(i=OPXInput(device='con2', number=1, offset=0.0, gain=10), q=OPXInput(device='con2', number=2, offset=0.0, gain=10)))}), port=101, connectivity=OPXplus(name='con2', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1e977f0>, {1: OPXOutput(device='con2', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con2', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con2', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con2', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con2', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con2', number=8, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf151ff40>, {1: OPXInput(device='con2', number=1, offset=0.0, gain=10), 2: OPXInput(device='con2', number=2, offset=0.0, gain=10)}))), 'octave3': Octave(name='octave3', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7ffaf1548940>, {1: OctaveOutput(device='octave3', number=1, lo_frequency=5800000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con3', number=1, offset=0.0, filter={}), q=OPXOutput(device='con3', number=2, offset=0.0, filter={}))), 4: OctaveOutput(device='octave3', number=4, lo_frequency=6600000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con3', number=7, offset=0.0, filter={}), q=OPXOutput(device='con3', number=8, offset=0.0, filter={}))), 3: OctaveOutput(device='octave3', number=3, lo_frequency=5900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con3', number=5, offset=0.0, filter={}), q=OPXOutput(device='con3', number=6, offset=0.0, filter={}))), 2: OctaveOutput(device='octave3', number=2, lo_frequency=5900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None), 5: OctaveOutput(device='octave3', number=5, lo_frequency=6600000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None)}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7ffaf15489d0>, {}), port=102, connectivity=OPXplus(name='con3', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548040>, {1: OPXOutput(device='con3', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con3', number=2, offset=0.0, filter={}), 7: OPXOutput(device='con3', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con3', number=8, offset=0.0, filter={}), 5: OPXOutput(device='con3', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con3', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf15480d0>, {}))), 'octave4': Octave(name='octave4', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7ffaf1548a60>, {1: OctaveOutput(device='octave4', number=1, lo_frequency=7520000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=1, offset=0.0, filter={}), q=OPXOutput(device='con5', number=2, offset=0.0, filter={}))), 2: OctaveOutput(device='octave4', number=2, lo_frequency=4900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=3, offset=0.0, filter={}), q=OPXOutput(device='con5', number=4, offset=0.0, filter={}))), 4: OctaveOutput(device='octave4', number=4, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=7, offset=0.0, filter={}), q=OPXOutput(device='con5', number=8, offset=0.0, filter={}))), 5: OctaveOutput(device='octave4', number=5, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=9, offset=0.0, filter={}), q=OPXOutput(device='con5', number=10, offset=0.0, filter={}))), 3: OctaveOutput(device='octave4', number=3, lo_frequency=4900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=5, offset=0.0, filter={}), q=OPXOutput(device='con5', number=6, offset=0.0, filter={})))}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7ffaf1548af0>, {1: OctaveInput(device='octave4', number=1, lo_frequency=7520000000, lo_source='internal', IF_mode_I='direct', IF_mode_Q='direct', opx_port=OPXIQ(i=OPXInput(device='con5', number=1, offset=0.0, gain=0), q=OPXInput(device='con5', number=2, offset=0.0, gain=0)))}), port=103, connectivity=OPXplus(name='con5', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548280>, {1: OPXOutput(device='con5', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con5', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con5', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con5', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con5', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con5', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con5', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con5', number=10, offset=0.0, filter={}), 5: OPXOutput(device='con5', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con5', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548310>, {1: OPXInput(device='con5', number=1, offset=0.0, gain=0), 2: OPXInput(device='con5', number=2, offset=0.0, gain=0)}))), 'octave5': Octave(name='octave5', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7ffaf1548b80>, {1: OctaveOutput(device='octave5', number=1, lo_frequency=7450000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con6', number=1, offset=0.0, filter={}), q=OPXOutput(device='con6', number=2, offset=0.0, filter={}))), 2: OctaveOutput(device='octave5', number=2, lo_frequency=5100000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con6', number=3, offset=0.0, filter={}), q=OPXOutput(device='con6', number=4, offset=0.0, filter={}))), 4: OctaveOutput(device='octave5', number=4, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con6', number=7, offset=0.0, filter={}), q=OPXOutput(device='con6', number=8, offset=0.0, filter={}))), 5: OctaveOutput(device='octave5', number=5, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con6', number=9, offset=0.0, filter={}), q=OPXOutput(device='con6', number=10, offset=0.0, filter={}))), 3: OctaveOutput(device='octave5', number=3, lo_frequency=5100000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None)}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7ffaf1548c10>, {1: OctaveInput(device='octave5', number=1, lo_frequency=7450000000, lo_source='internal', IF_mode_I='direct', IF_mode_Q='direct', opx_port=OPXIQ(i=OPXInput(device='con6', number=1, offset=0.0, gain=10), q=OPXInput(device='con6', number=2, offset=0.0, gain=10)))}), port=104, connectivity=OPXplus(name='con6', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf15483a0>, {1: OPXOutput(device='con6', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con6', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con6', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con6', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con6', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con6', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con6', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con6', number=10, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548430>, {1: OPXInput(device='con6', number=1, offset=0.0, gain=10), 2: OPXInput(device='con6', number=2, offset=0.0, gain=10)}))), 'octave6': Octave(name='octave6', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7ffaf1548ca0>, {2: OctaveOutput(device='octave6', number=2, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con8', number=3, offset=0.0, filter={}), q=OPXOutput(device='con8', number=4, offset=0.0, filter={}))), 4: OctaveOutput(device='octave6', number=4, lo_frequency=6400000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con8', number=7, offset=0.0, filter={}), q=OPXOutput(device='con8', number=8, offset=0.0, filter={}))), 5: OctaveOutput(device='octave6', number=5, lo_frequency=6400000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con8', number=9, offset=0.0, filter={}), q=OPXOutput(device='con8', number=10, offset=0.0, filter={}))), 3: OctaveOutput(device='octave6', number=3, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con8', number=5, offset=0.0, filter={}), q=OPXOutput(device='con8', number=6, offset=0.0, filter={}))), 1: OctaveOutput(device='octave6', number=1, lo_frequency=4900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None)}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7ffaf1548d30>, {}), port=105, connectivity=OPXplus(name='con8', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf15485e0>, {3: OPXOutput(device='con8', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con8', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con8', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con8', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con8', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con8', number=10, offset=0.0, filter={}), 5: OPXOutput(device='con8', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con8', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7ffaf1548670>, {})))}, time_of_flight=224, smearing=0, bounds=Bounds(waveforms=40000, readout=30, instructions=1000000), calibration_path=PosixPath('/nfs/tools/qibolab_platforms_qrc/qw11q'), write_calibration=False, _calibration_path=None, script_file_name=None, manager=None, config=QMConfig(version=1, controllers={}, octaves={}, elements={}, pulses={}, waveforms={}, digital_waveforms={'ON': {'samples': [(1, 0)]}}, integration_weights={}, mixers={}), is_connected=False, simulation_duration=None, cloud=False).
/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qm/quantum_machines_manager.py:102: DeprecationWarning: QMM was opened with OctaveConfig. Please note that from QOP2.4.0 the octave devices are managed by the cluster setting in the QM-app. It is recommended to remove the OctaveConfig from the QMM instantiation.
  warnings.warn(
2024-09-23 12:41:01,935 - qm - INFO     - Performing health check
2024-09-23 12:41:01,953 - qm - WARNING  - Health check warning: Inter-OPX connectivity issues in OPX: con1. Missing ports are: 12, 11, 10, 9. See QM-App for more info.
2024-09-23 12:41:01,953 - qm - WARNING  - Health check warning: Inter-OPX connectivity issues in OPX: con2. Missing ports are: 12, 11, 10, 9. See QM-App for more info.
2024-09-23 12:41:01,953 - qm - WARNING  - Health check warning: Inter-OPX connectivity issues in OPX: con3. Missing ports are: 12, 11, 10, 9. See QM-App for more info.
2024-09-23 12:41:01,953 - qm - WARNING  - Health check warning: Inter-OPX connectivity issues in OPX: con4. Missing ports are: 12, 11, 10, 9. See QM-App for more info.
2024-09-23 12:41:01,953 - qm - WARNING  - Health check warning: Inter-OPX connectivity issues in OPX: con5. Missing ports are: 12, 11, 10, 9. See QM-App for more info.
2024-09-23 12:41:01,953 - qm - WARNING  - Health check warning: Inter-OPX connectivity issues in OPX: con6. Missing ports are: 12, 11, 10, 9. See QM-App for more info.
2024-09-23 12:41:01,953 - qm - WARNING  - Health check warning: Inter-OPX connectivity issues in OPX: con7. Missing ports are: 12, 11, 10, 9. See QM-App for more info.
2024-09-23 12:41:01,953 - qm - WARNING  - Health check warning: Inter-OPX connectivity issues in OPX: con8. Missing ports are: 12, 11, 10, 9. See QM-App for more info.
2024-09-23 12:41:01,953 - qm - WARNING  - Health check warning: Inter-OPX connectivity issues in OPX: con9. Missing ports are: 12, 11, 10, 9. See QM-App for more info.
2024-09-23 12:41:01,953 - qm - INFO     - Health check passed
[Qibo 0.2.12|INFO|2024-09-23 12:41:01]: Connecting to instrument <qibolab.instruments.rohde_schwarz.SGS100A object at 0x7ffaf1512e90>.
[twpaB(RohdeSchwarz_SGS100A)] Could not connect at TCPIP0::192.168.0.34::5025::SOCKET
Traceback (most recent call last):
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qcodes/instrument/visa.py", line 214, in _connect_and_handle_error
    visa_handle, visabackend, resource_manager = self._open_resource(
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qcodes/instrument/visa.py", line 238, in _open_resource
    resource_manager = pyvisa.ResourceManager()
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/pyvisa/highlevel.py", line 2992, in __new__
    visa_library = open_visa_library(visa_library)
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/pyvisa/highlevel.py", line 2899, in open_visa_library
    wrapper = _get_default_wrapper()
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/pyvisa/highlevel.py", line 2858, in _get_default_wrapper
    raise ValueError(
ValueError: Could not locate a VISA implementation. Install either the IVI binary or pyvisa-py.
[Qibo 0.2.12|ERROR|2024-09-23 12:41:02]: Cannot establish connection to <qibolab.instruments.rohde_schwarz.SGS100A object at 0x7ffaf1512e90> instruments. Error captured: 'Could not locate a VISA implementation. Install either the IVI binary or pyvisa-py.'
Traceback (most recent call last):
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qibolab/platform/platform.py", line 149, in connect
    instrument.connect()
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qibolab/instruments/oscillator.py", line 78, in connect
    self.device = self.create()
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qibolab/instruments/rohde_schwarz.py", line 14, in create
    return LO_SGS100A.RohdeSchwarz_SGS100A(
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qcodes/instrument/instrument_meta.py", line 36, in __call__
    new_inst = super().__call__(*args, **kwargs)
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qcodes/instrument_drivers/rohde_schwarz/SGS100A.py", line 43, in __init__
    super().__init__(name, address, **kwargs)
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qcodes/instrument/visa.py", line 187, in __init__
    visa_handle, visabackend, resource_manager = self._connect_and_handle_error(
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qcodes/instrument/visa.py", line 220, in _connect_and_handle_error
    raise e
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qcodes/instrument/visa.py", line 214, in _connect_and_handle_error
    visa_handle, visabackend, resource_manager = self._open_resource(
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qcodes/instrument/visa.py", line 238, in _open_resource
    resource_manager = pyvisa.ResourceManager()
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/pyvisa/highlevel.py", line 2992, in __new__
    visa_library = open_visa_library(visa_library)
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/pyvisa/highlevel.py", line 2899, in open_visa_library
    wrapper = _get_default_wrapper()
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/pyvisa/highlevel.py", line 2858, in _get_default_wrapper
    raise ValueError(
ValueError: Could not locate a VISA implementation. Install either the IVI binary or pyvisa-py.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/nfs/users/elisa.stabilini/test_venv/bin/qq", line 8, in <module>
    sys.exit(command())
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/click/core.py", line 1157, in __call__
    return self.main(*args, **kwargs)
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/click/core.py", line 1078, in main
    rv = self.invoke(ctx)
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/click/core.py", line 1688, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/click/core.py", line 1434, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/click/core.py", line 783, in invoke
    return __callback(*args, **kwargs)
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qibocal/cli/_base.py", line 75, in auto
    autocalibrate(runcard, folder, force, update)
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qibocal/cli/autocalibration.py", line 38, in autocalibrate
    platform.connect()
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qibolab/platform/platform.py", line 151, in connect
    raise_error(
  File "/nfs/users/elisa.stabilini/test_venv/lib/python3.10/site-packages/qibo/config.py", line 46, in raise_error
    raise exception(message)
RuntimeError: Cannot establish connection to <qibolab.instruments.rohde_schwarz.SGS100A object at 0x7ffaf1512e90> instruments. Error captured: 'Could not locate a VISA implementation. Install either the IVI binary or pyvisa-py.'
