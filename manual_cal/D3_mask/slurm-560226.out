[Qibo 0.2.12|INFO|2024-10-03 13:55:42]: Loading platform dummy
2024-10-03 13:55:43,548 - qm - INFO     - Starting session: 14fc5041-5cf3-4912-b50e-8e6079ec9094
2024-10-03 13:55:47,326 - qm - ERROR    - Failed to detect a QuantumMachines server. Tried connecting to 192.168.0.101:80.
Errors:
192.168.0.101:80: All connection attempts failed
Traceback (most recent call last):
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/anyio/_core/_sockets.py", line 165, in try_connect
    stream = await asynclib.connect_tcp(remote_host, remote_port, local_address)
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 2525, in connect_tcp
    await get_running_loop().create_connection(
  File "/usr/lib/python3.10/asyncio/base_events.py", line 1076, in create_connection
    raise exceptions[0]
  File "/usr/lib/python3.10/asyncio/base_events.py", line 1060, in create_connection
    sock = await self._connect_sock(
  File "/usr/lib/python3.10/asyncio/base_events.py", line 969, in _connect_sock
    await self.sock_connect(sock, address)
  File "/usr/lib/python3.10/asyncio/selector_events.py", line 501, in sock_connect
    return await fut
  File "/usr/lib/python3.10/asyncio/selector_events.py", line 541, in _sock_connect_cb
    raise OSError(err, f'Connect call failed {address}')
OSError: [Errno 113] Connect call failed ('192.168.0.101', 80)

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpcore/_exceptions.py", line 10, in map_exceptions
    yield
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpcore/backends/asyncio.py", line 111, in connect_tcp
    stream: anyio.abc.ByteStream = await anyio.connect_tcp(
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/anyio/_core/_sockets.py", line 227, in connect_tcp
    raise OSError("All connection attempts failed") from cause
OSError: All connection attempts failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpx/_transports/default.py", line 60, in map_httpcore_exceptions
    yield
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpx/_transports/default.py", line 353, in handle_async_request
    resp = await self._pool.handle_async_request(req)
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpcore/_async/connection_pool.py", line 253, in handle_async_request
    raise exc
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpcore/_async/connection_pool.py", line 237, in handle_async_request
    response = await connection.handle_async_request(request)
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpcore/_async/connection.py", line 86, in handle_async_request
    raise exc
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpcore/_async/connection.py", line 63, in handle_async_request
    stream = await self._connect(request)
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpcore/_async/connection.py", line 111, in _connect
    stream = await self._network_backend.connect_tcp(**kwargs)
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpcore/backends/auto.py", line 29, in connect_tcp
    return await self._backend.connect_tcp(
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpcore/backends/asyncio.py", line 109, in connect_tcp
    with map_exceptions(exc_map):
  File "/usr/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpcore/_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc)
httpcore.ConnectError: All connection attempts failed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/qm/api/server_detector.py", line 54, in detect_server
    connection_details = _redirect(connection_details)
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/qm/api/server_detector.py", line 81, in _redirect
    host, port = run_async(
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/qm/utils/async_utils.py", line 38, in run_async
    return create_future(coroutine).result()  # type: ignore[no-any-return]
  File "/usr/lib/python3.10/concurrent/futures/_base.py", line 458, in result
    return self.__get_result()
  File "/usr/lib/python3.10/concurrent/futures/_base.py", line 403, in __get_result
    raise self._exception
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/qm/communication/http_redirection.py", line 18, in send_redirection_check
    response = await client.post(f"http://{host}:{port}", headers=extended_headers, content=bytes(Empty()))
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpx/_client.py", line 1848, in post
    return await self.request(
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpx/_client.py", line 1533, in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpx/_client.py", line 1620, in send
    response = await self._send_handling_auth(
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpx/_client.py", line 1648, in _send_handling_auth
    response = await self._send_handling_redirects(
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpx/_client.py", line 1685, in _send_handling_redirects
    response = await self._send_single_request(request)
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpx/_client.py", line 1722, in _send_single_request
    response = await transport.handle_async_request(request)
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpx/_transports/default.py", line 352, in handle_async_request
    with map_httpcore_exceptions():
  File "/usr/lib/python3.10/contextlib.py", line 153, in __exit__
    self.gen.throw(typ, value, traceback)
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/httpx/_transports/default.py", line 77, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: All connection attempts failed
.
Traceback (most recent call last):
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/qibolab/platform/platform.py", line 149, in connect
    instrument.connect()
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/qibolab/instruments/qm/controller.py", line 248, in connect
    self.manager = QuantumMachinesManager(
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/qm/quantum_machines_manager.py", line 93, in __init__
    self._server_details = self._initialize_connection(
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/qm/quantum_machines_manager.py", line 115, in _initialize_connection
    server_details = detect_server(
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/qm/api/server_detector.py", line 77, in detect_server
    raise QmServerDetectionError(message)
qm.exceptions.QmServerDetectionError: Failed to detect a QuantumMachines server. Tried connecting to 192.168.0.101:80.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/nfs/users/elisa.stabilini/cal_qw11q/manual_cal/D3_mask/resonator_spectroscopy_low.py", line 5, in <module>
    with Executor.open(
  File "/usr/lib/python3.10/contextlib.py", line 135, in __enter__
    return next(self.gen)
  File "/nfs/users/elisa.stabilini/qibocal/src/qibocal/auto/execute.py", line 320, in open
    ex.init(path, force, platform, update, targets)
  File "/nfs/users/elisa.stabilini/qibocal/src/qibocal/auto/execute.py", line 284, in init
    platform.connect()
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/qibolab/platform/platform.py", line 151, in connect
    raise_error(
  File "/nfs/users/elisa.stabilini/my_calibration/lib/python3.10/site-packages/qibo/config.py", line 46, in raise_error
    raise exception(message)
RuntimeError: Cannot establish connection to QMController(name='qm', address='192.168.0.101:80', opxs={'con2': OPXplus(name='con2', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8ca60>, {1: OPXOutput(device='con2', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con2', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con2', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con2', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con2', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con2', number=8, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8caf0>, {1: OPXInput(device='con2', number=1, offset=0.0, gain=10), 2: OPXInput(device='con2', number=2, offset=0.0, gain=10)})), 'con3': OPXplus(name='con3', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8cb80>, {1: OPXOutput(device='con3', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con3', number=2, offset=0.0, filter={}), 7: OPXOutput(device='con3', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con3', number=8, offset=0.0, filter={}), 5: OPXOutput(device='con3', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con3', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8cc10>, {})), 'con4': OPXplus(name='con4', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8cca0>, {1: OPXOutput(device='con4', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con4', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con4', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con4', number=4, offset=0.0, filter={}), 5: OPXOutput(device='con4', number=5, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8cd30>, {})), 'con5': OPXplus(name='con5', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8cdc0>, {1: OPXOutput(device='con5', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con5', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con5', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con5', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con5', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con5', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con5', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con5', number=10, offset=0.0, filter={}), 5: OPXOutput(device='con5', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con5', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8ce50>, {1: OPXInput(device='con5', number=1, offset=0.0, gain=0), 2: OPXInput(device='con5', number=2, offset=0.0, gain=0)})), 'con6': OPXplus(name='con6', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8cee0>, {1: OPXOutput(device='con6', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con6', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con6', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con6', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con6', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con6', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con6', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con6', number=10, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8cf70>, {1: OPXInput(device='con6', number=1, offset=0.0, gain=10), 2: OPXInput(device='con6', number=2, offset=0.0, gain=10)})), 'con7': OPXplus(name='con7', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8d000>, {3: OPXOutput(device='con7', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con7', number=4, offset=0.0, filter={}), 5: OPXOutput(device='con7', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con7', number=6, offset=0.0, filter={}), 7: OPXOutput(device='con7', number=7, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8d090>, {})), 'con8': OPXplus(name='con8', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8d120>, {3: OPXOutput(device='con8', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con8', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con8', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con8', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con8', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con8', number=10, offset=0.0, filter={}), 5: OPXOutput(device='con8', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con8', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8d1b0>, {})), 'con9': OPXplus(name='con9', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8d240>, {3: OPXOutput(device='con9', number=3, offset=0.22322496600648412, filter={'feedforward': [1.1298143371682787, -0.9007185757251136], 'feedback': [0.7709042385568349]}), 4: OPXOutput(device='con9', number=4, offset=-0.42139253315245123, filter={'feedforward': [1.0891790415038731, -1.024484298837039], 'feedback': [0.935305257333166]}), 5: OPXOutput(device='con9', number=5, offset=-0.2074, filter={'feedforward': [1.0725851073784813, -0.9529722265285006], 'feedback': [0.880387119150019]}), 6: OPXOutput(device='con9', number=6, offset=0.0, filter={}), 7: OPXOutput(device='con9', number=7, offset=-0.04, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8d2d0>, {}))}, octaves={'octave2': Octave(name='octave2', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7fcd1af8d360>, {1: OctaveOutput(device='octave2', number=1, lo_frequency=7430000000, gain=-10, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con2', number=1, offset=0.0, filter={}), q=OPXOutput(device='con2', number=2, offset=0.0, filter={}))), 2: OctaveOutput(device='octave2', number=2, lo_frequency=4800000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con2', number=3, offset=0.0, filter={}), q=OPXOutput(device='con2', number=4, offset=0.0, filter={}))), 4: OctaveOutput(device='octave2', number=4, lo_frequency=6100000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con2', number=7, offset=0.0, filter={}), q=OPXOutput(device='con2', number=8, offset=0.0, filter={}))), 3: OctaveOutput(device='octave2', number=3, lo_frequency=4800000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None), 5: OctaveOutput(device='octave2', number=5, lo_frequency=6100000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None)}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7fcd1af8d3f0>, {1: OctaveInput(device='octave2', number=1, lo_frequency=7430000000, lo_source='internal', IF_mode_I='direct', IF_mode_Q='direct', opx_port=OPXIQ(i=OPXInput(device='con2', number=1, offset=0.0, gain=10), q=OPXInput(device='con2', number=2, offset=0.0, gain=10)))}), port=101, connectivity=OPXplus(name='con2', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8ca60>, {1: OPXOutput(device='con2', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con2', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con2', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con2', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con2', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con2', number=8, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8caf0>, {1: OPXInput(device='con2', number=1, offset=0.0, gain=10), 2: OPXInput(device='con2', number=2, offset=0.0, gain=10)}))), 'octave3': Octave(name='octave3', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7fcd1af8d480>, {1: OctaveOutput(device='octave3', number=1, lo_frequency=5800000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con3', number=1, offset=0.0, filter={}), q=OPXOutput(device='con3', number=2, offset=0.0, filter={}))), 4: OctaveOutput(device='octave3', number=4, lo_frequency=6600000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con3', number=7, offset=0.0, filter={}), q=OPXOutput(device='con3', number=8, offset=0.0, filter={}))), 3: OctaveOutput(device='octave3', number=3, lo_frequency=5900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con3', number=5, offset=0.0, filter={}), q=OPXOutput(device='con3', number=6, offset=0.0, filter={}))), 2: OctaveOutput(device='octave3', number=2, lo_frequency=5900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None), 5: OctaveOutput(device='octave3', number=5, lo_frequency=6600000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None)}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7fcd1af8d510>, {}), port=102, connectivity=OPXplus(name='con3', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8cb80>, {1: OPXOutput(device='con3', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con3', number=2, offset=0.0, filter={}), 7: OPXOutput(device='con3', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con3', number=8, offset=0.0, filter={}), 5: OPXOutput(device='con3', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con3', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8cc10>, {}))), 'octave4': Octave(name='octave4', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7fcd1af8d5a0>, {1: OctaveOutput(device='octave4', number=1, lo_frequency=7520000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=1, offset=0.0, filter={}), q=OPXOutput(device='con5', number=2, offset=0.0, filter={}))), 2: OctaveOutput(device='octave4', number=2, lo_frequency=4900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=3, offset=0.0, filter={}), q=OPXOutput(device='con5', number=4, offset=0.0, filter={}))), 4: OctaveOutput(device='octave4', number=4, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=7, offset=0.0, filter={}), q=OPXOutput(device='con5', number=8, offset=0.0, filter={}))), 5: OctaveOutput(device='octave4', number=5, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=9, offset=0.0, filter={}), q=OPXOutput(device='con5', number=10, offset=0.0, filter={}))), 3: OctaveOutput(device='octave4', number=3, lo_frequency=4900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con5', number=5, offset=0.0, filter={}), q=OPXOutput(device='con5', number=6, offset=0.0, filter={})))}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7fcd1af8d630>, {1: OctaveInput(device='octave4', number=1, lo_frequency=7520000000, lo_source='internal', IF_mode_I='direct', IF_mode_Q='direct', opx_port=OPXIQ(i=OPXInput(device='con5', number=1, offset=0.0, gain=0), q=OPXInput(device='con5', number=2, offset=0.0, gain=0)))}), port=103, connectivity=OPXplus(name='con5', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8cdc0>, {1: OPXOutput(device='con5', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con5', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con5', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con5', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con5', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con5', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con5', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con5', number=10, offset=0.0, filter={}), 5: OPXOutput(device='con5', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con5', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8ce50>, {1: OPXInput(device='con5', number=1, offset=0.0, gain=0), 2: OPXInput(device='con5', number=2, offset=0.0, gain=0)}))), 'octave5': Octave(name='octave5', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7fcd1af8d6c0>, {1: OctaveOutput(device='octave5', number=1, lo_frequency=7450000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con6', number=1, offset=0.0, filter={}), q=OPXOutput(device='con6', number=2, offset=0.0, filter={}))), 2: OctaveOutput(device='octave5', number=2, lo_frequency=5100000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con6', number=3, offset=0.0, filter={}), q=OPXOutput(device='con6', number=4, offset=0.0, filter={}))), 4: OctaveOutput(device='octave5', number=4, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con6', number=7, offset=0.0, filter={}), q=OPXOutput(device='con6', number=8, offset=0.0, filter={}))), 5: OctaveOutput(device='octave5', number=5, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con6', number=9, offset=0.0, filter={}), q=OPXOutput(device='con6', number=10, offset=0.0, filter={}))), 3: OctaveOutput(device='octave5', number=3, lo_frequency=5100000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None)}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7fcd1af8d750>, {1: OctaveInput(device='octave5', number=1, lo_frequency=7450000000, lo_source='internal', IF_mode_I='direct', IF_mode_Q='direct', opx_port=OPXIQ(i=OPXInput(device='con6', number=1, offset=0.0, gain=10), q=OPXInput(device='con6', number=2, offset=0.0, gain=10)))}), port=104, connectivity=OPXplus(name='con6', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8cee0>, {1: OPXOutput(device='con6', number=1, offset=0.0, filter={}), 2: OPXOutput(device='con6', number=2, offset=0.0, filter={}), 3: OPXOutput(device='con6', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con6', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con6', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con6', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con6', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con6', number=10, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8cf70>, {1: OPXInput(device='con6', number=1, offset=0.0, gain=10), 2: OPXInput(device='con6', number=2, offset=0.0, gain=10)}))), 'octave6': Octave(name='octave6', outputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7fcd1af8d7e0>, {2: OctaveOutput(device='octave6', number=2, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con8', number=3, offset=0.0, filter={}), q=OPXOutput(device='con8', number=4, offset=0.0, filter={}))), 4: OctaveOutput(device='octave6', number=4, lo_frequency=6400000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con8', number=7, offset=0.0, filter={}), q=OPXOutput(device='con8', number=8, offset=0.0, filter={}))), 5: OctaveOutput(device='octave6', number=5, lo_frequency=6400000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con8', number=9, offset=0.0, filter={}), q=OPXOutput(device='con8', number=10, offset=0.0, filter={}))), 3: OctaveOutput(device='octave6', number=3, lo_frequency=5700000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=OPXIQ(i=OPXOutput(device='con8', number=5, offset=0.0, filter={}), q=OPXOutput(device='con8', number=6, offset=0.0, filter={}))), 1: OctaveOutput(device='octave6', number=1, lo_frequency=4900000000, gain=0, lo_source='internal', output_mode='triggered', digital_delay=57, digital_buffer=18, opx_port=None)}), inputs=PortsDefaultdict(<function Octave.__post_init__.<locals>.<lambda> at 0x7fcd1af8d870>, {}), port=105, connectivity=OPXplus(name='con8', outputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8d120>, {3: OPXOutput(device='con8', number=3, offset=0.0, filter={}), 4: OPXOutput(device='con8', number=4, offset=0.0, filter={}), 7: OPXOutput(device='con8', number=7, offset=0.0, filter={}), 8: OPXOutput(device='con8', number=8, offset=0.0, filter={}), 9: OPXOutput(device='con8', number=9, offset=0.0, filter={}), 10: OPXOutput(device='con8', number=10, offset=0.0, filter={}), 5: OPXOutput(device='con8', number=5, offset=0.0, filter={}), 6: OPXOutput(device='con8', number=6, offset=0.0, filter={})}), inputs=PortsDefaultdict(<function OPXplus.__post_init__.<locals>.<lambda> at 0x7fcd1af8d1b0>, {})))}, time_of_flight=224, smearing=0, bounds=Bounds(waveforms=40000, readout=30, instructions=1000000), calibration_path=PosixPath('/home/users/elisa.stabilini/qibolab_platforms_qrc/qw11q'), write_calibration=False, _calibration_path='/tmp/tmpmt86lbw3', script_file_name=None, manager=None, config=QMConfig(version=1, controllers={}, octaves={}, elements={}, pulses={}, waveforms={}, digital_waveforms={'ON': {'samples': [(1, 0)]}}, integration_weights={}, mixers={}), is_connected=False, simulation_duration=None, cloud=False) instruments. Error captured: 'Failed to detect a QuantumMachines server. Tried connecting to 192.168.0.101:80.'
